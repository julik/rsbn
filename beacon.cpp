#include "beacon.h"
#include "greatcircle.h"

extern void XPLMWorldToLocal(double lat, double lon, double elev, double &locX, double &locY, double &locZ);

using namespace std;

static const float RAD_RATIO = 57.2957795;
static const float MAX_DISTANCE_KM = 496.0; // see here http://zi-16.narod.ru/study/study-all.htm

double inline radToDeg(double rad) {
    return rad * RAD_RATIO;
}

double inline degToRad(double deg) {
    return deg / RAD_RATIO;
}

// Boilerplate
Beacon::Beacon() {
}

// Fill the beacon data from a line. Accepts lines like:
// 02|ASTRAKHAN|GV|46.2766666666667|48.0033333333333|1.0
// channel|name|callsign|lat with decimal degrees|lon with decimal degrees|elevation, meters MSL
// The lines are generated by pre-processing scripts written in Ruby for ease of parsing
Beacon::Beacon(char *line)
{
    cachedCoords = FALSE;
    strncpy(channel,    strtok(line, "|"), sizeof(channel));
    strncpy(name,       strtok(NULL, "|"), sizeof(name));
    strncpy(callsign,   strtok(NULL, "|"), sizeof(callsign));
    strncpy(vorFreq,    strtok(NULL, "|"), sizeof(vorFreq));
    lat =  atof(strtok(NULL, "|"));
    lon =  atof(strtok(NULL, "|"));
    elev = atof(strtok(NULL, "\n"));
}

bool Beacon::hasCode(int strobe, int nul)
{
    char code[] = "01";
    sprintf(code, "%d%d", strobe, nul);
    return strcmp(code, channel) == 0;
}

// Get the absolute distance to aircraft, in kilometers, taking the altitude into account
double Beacon::distanceFrom(double acfLat, double acfLon, double acfElev)
{
    double linearDist = gcDistance(acfLat, acfLon, lat, lon);
    double tanDist = sqrt(pow(linearDist, 2) + pow(((acfElev - elev) / 1000), 2));
    return tanDist;
}

// Is the beacon within the reception range?
// RSBN max reception distance
// depends on inverse square falloff, according to the following law
// max_km = 3.57 * sqrt(height_of_acft_in_meters)
// (see Chyorny and Korablin)
// There is also a "mushroom" of inop whose radius is roughly eql to H
bool Beacon::isInRangeOf(double acfLat, double acfLon, double acfElev)
{
    return distanceFrom(acfLat, acfLon, acfElev) < (3.57 * sqrt(acfElev));
}

// Check if we are overflying now
bool Beacon::isOverflyingNow(double acfLat, double acfLon, double acfElev) {
    double dist = distanceFrom(acfLat, acfLon, acfElev);
    return (dist < (acfElev / 1000));
}


// Get the bearing to aircraft
// http://www.movable-type.co.uk/scripts/latlong.html
double Beacon::bearingToAcf(double acfLatDeg, double acfLonDeg)
{
	// Compute relative bearing to the beacon (Azimut), relative to the beacon true north. Since true north is used
	// we can operate in lat/lon directly, but to do it we first need the aircraft position in lat/lon terms
	// We compute FROM the beacon as opposed to TO, and then reciprocate the heading
	double lat1 = degToRad(acfLatDeg);
	double lon1 = degToRad(acfLonDeg);
    
    double lat2 = degToRad(lat);
    double lon2 = degToRad(lon);
    
    // Radians to degrees
    double brg = atan2(sin(lat2 - lat1) * cos(lat2), (cos(lat1) * sin(lat2)) - (sin(lat1)* cos(lat2) * cos(lon2 - lon1)));
    return fmod((radToDeg(brg) + 180), 360.0);
}